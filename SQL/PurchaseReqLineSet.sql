SELECT t.*,
supplier_api.get_vendor_name(vendor_no) vendorname,
purchase_req_line_part_api.get_manufacturer_id(requisition_no,line_no,release_no) manufacturerid,
purchase_req_line_part_api.get_manufacturer_part_no(requisition_no,line_no,release_no) manufacturerpartid,
part_catalog_api.get_configurable_db(part_no) configurable,
purchase_req_line_part_api.get_configuration_id(requisition_no, line_no, release_no) configurationid,
decode(dictionary_sys.component_is_active_num('SHPORD') , 1, 'TRUE', 'FALSE') isshpordinstalled,
decode(dictionary_sys.component_is_active_num('MFGSTD') , 1, 'TRUE', 'FALSE') ismfgstdinstalled,
order_supply_demand_type_api.get_db_value(7) ordersupplydemandtypedb,
purchase_req_line_part_api.get_qty_in_purch_unit(requisition_no,line_no,release_no) qtyinpurchum,
decode(purchase_req_line_api.authorization_required(requisition_no, line_no, release_no),'REQUIRED', 'TRUE', 'FALSE') authorizationrequired,
rental_object_api.get_planned_rental_start_date(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')) plannedrentalstartdate,
rental_object_api.get_planned_rental_start_date(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')) plannedrentalduration,
rental_object_api.get_rental_duration_unit_meas(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')) rentaldurationuom,
rental_object_api.get_planned_rental_end_date(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')) plannedrentalenddate,
rental_object_api.get_planned_rental_end_date(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')) plannedrentalendtime,
rental_object_manager_api.calculate_chargeable_days(rental_object_api.get_planned_rental_start_date(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')), rental_object_api.get_planned_rental_end_date(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')), rental_object_api.get_chargeable_id(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')), rental_object_api.get_exception_id(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')), rental_period_rounding_api.encode(rental_object_api.get_period_rounding(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')))) chargeabledays,
rental_object_api.get_chargeable_id(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')) chargeabledaysid,
rental_object_api.get_planned_rental_return_date(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')) plannedrentalreturndate,
rental_object_api.get_exception_id(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')) dateexceptionid,
rental_object_api.get_period_rounding(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')) periodrounding,
rental_object_api.get_trans_schedule_id(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req')) scheduleid,
purchase_req_line_api.get_line_total(requisition_no, line_no, release_no) totalbase,
purchase_req_line_api.get_line_tot_in_price_curr(requisition_no, line_no, release_no) totalcurr,
purchase_req_util_api.get_inc_tax_total_base(requisition_no, line_no, release_no) grosstotalbase,
purchase_req_util_api.get_inc_tax_total_curr(requisition_no, line_no, release_no) grosstotalcurr,
decode(part_no, null, taxable_db, purchase_part_api.get_taxable_db(contract, part_no)) taxable,
source_tax_item_api.multiple_tax_items_exist(company, 'PURCHASE_REQUISITION_LINE', requisition_no, line_no, release_no, '*', '*') multipletaxlines,
(case when (order_code != '6' and demand_code_db not in ('PRJ','PI','WO') and part_ownership_db != 'COMPANY RENTAL ASSET') then null else part_ownership_db end) partownership,
decode(part_ownership_db, 'customer owned', owning_customer_no, 'supplier rented', vendor_no) owner,
customer_info_api.get_name(owning_customer_no) owningcustomername,
decode(purchase_part_api.is_inventory_part(contract,part_no),1, 'TRUE', 'FALSE') inventorypart,
decode(part_no,null,inquiry_line_nopart_order_api.get_inquiry_no_from_req(requisition_no, line_no, release_no),inquiry_line_part_order_api.get_inquiry_no_from_req(requisition_no, line_no, release_no)) requestno,
decode(part_no,null,inquiry_line_nopart_order_api.get_line_no_from_req(requisition_no, line_no, release_no),inquiry_line_part_order_api.get_line_no_from_req(requisition_no, line_no, release_no)) requestlineno,
decode(demand_code_db, 'WO', to_number(demand_order_no)) workorderno,
inventory_part_api.get_description(contract, shop_ord_api.get_part_no(demand_order_no, demand_release, demand_sequence_no)) orderpartdescription,
project_program_global_api.get_description(project_api.get_program_id(project_id)) programdescription,
activity_api.get_sub_project_description(activity_seq) subprojectdescription,
activity_api.get_sub_project_id(activity_seq) subprojectid,
external_service_type_api.get_description(service_type) servicedescription,
decode(pre_accounting_api.distribution_exist(pre_accounting_id),1, 'TRUE','FALSE') distributedpreposting,
purchase_part_alternative_api.check_if_alternate_exist(contract, part_no) alternateexist,
purchase_req_line_part_api.get_ord_conf_for_cust(requisition_no, line_no, release_no) orderconfirmation2,
decode(document_text_api.note_id_exist(note_id), 1, 'TRUE', 'FALSE') additionalcostdetailsexist,
supplier_address_api.get_address_no(vendor_no, address_type_code_api.get_client_value(1)) addressid,
material_trans_requisition_api.is_open_order_attached(contract, part_no, requisition_no, line_no, release_no) attachedtomtr,
part_gtin_api.get_default_gtin_no(part_no) gtinno,
project_misc_procurement_api.get_project_address(project_id, requisition_no, line_no, release_no, demand_code, activity_seq) projectaddress,
pur_auth_reject_reason_api.get_description(company,reject_reason_id) description2,
rental_trans_schedule_api.get_description(rental_object_api.get_trans_schedule_id(rental_object_api.get_rental_no(requisition_no,line_no,release_no,null,'pur req'))) scheduledescription,
purchase_req_line_api.convert_to_rfq_allowed(requisition_no, line_no, release_no) allowconverttorfq,
purchase_req_line_api.get_total_tax_amount_base(requisition_no,line_no,release_no) taxamountbase,
purchase_req_line_api.get_total_ndt_curr_amount(requisition_no,line_no,release_no) ndtamountcurrency,
purchase_req_line_api.get_total_tax_amount_curr(requisition_no,line_no,release_no) taxamountcurrency,
purchase_req_line_api.get_total_ndt_dom_amount(requisition_no,line_no,release_no)  ndtamountbase,
shop_order_operation_api.get_operation_description(demand_order_no, demand_release, demand_sequence_no, demand_operation_no) operationdesc,
decode(part_ownership_db, 'CUSTOMER OWNED', owning_customer_no, 'SUPPLIER RENTED', vendor_no) owningcustomerno,
supplier_address_api.get_address_no(vendor_no, address_type_code_api.get_client_value(1)) supplierid,
purchase_order_line_api.get_objstate(order_no, assg_line_no, assg_release_no) polinestatus,
company_finance_api.get_currency_code(company) basecurrcode,
(case when project_id is null then '*' when activity_seq > 0 then project_id else '*' end) projectid2,
shop_ord_api.get_part_no(demand_order_no, demand_release, demand_sequence_no) shopordpartno,
activity_api.get_activity_no(activity_seq) activityno,
activity_api.get_description(activity_seq) activitydescription,
project_api.get_program_id(project_id) projectprogarmid,
project_api.get_name(project_id) projectname,
(case when purchase_requisition_api.authorization_required(requisition_no) = 'REQUIRED' then 'To Authorize' when objstate in ('Planned', 'Released', 'Partially Authorized', 'Authorized') then objstate end) status,
decode(connected_phrase_api.check_phrase_exists('PURCHASE_REQUISITION_LINE', requisition_no, line_no, release_no, '*', '*'), 1,'TRUE','FALSE') contractclausesexist,
external_service_price_api.get_external_service_lead_time(contract, part_no, vendor_no, service_type) externalserviceleadtime,
income_type_api.get_income_type_id(internal_income_type) incometypeid,
inventory_part_api.get_second_commodity(contract, part_no) commoditygroup2,
level_1_part_by_ms_set_api.get_planning_tf_date(contract, part_no,nvl(project_id, '*'), 1) planningtfdate,
level_1_part_api.get_parent_part_no(contract, part_no, nvl(project_id, '*')) msfamilypart,
inventory_part_api.get_planner_buyer(contract, part_no) planner
FROM PURCHASE_REQ_LINE_ALL t
WHERE to_date(substr(t.OBJVERSION, 0, 8), 'YYYYMMDD') between to_date('20181101', 'YYYYMMDD') AND  to_date('20240331', 'YYYYMMDD');
