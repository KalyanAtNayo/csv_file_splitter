select t.*,
       Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(contract)) currency,
       Inventory_Part_API.Get_Planner_Buyer(CONTRACT, PART_NO) planner,
       Person_Info_API.Get_Name(COST_ESTIMATOR_ID) cost_estimator,
       Manuf_Part_Attribute_API.Get_Manuf_Engineer(CONTRACT, PART_NO) manuf_engineer,
       Person_Info_API.Get_Name(Manuf_Part_Attribute_API.Get_Manuf_Engineer(CONTRACT,
                                                                            PART_NO)) manuf_engineer_name,
       Inventory_Part_Planner_API.Get_Buyer_Name(Inventory_Part_API.Get_Planner_Buyer(CONTRACT,
                                                                                      PART_NO)) planner_name,
       DECODE(PART_CATALOG_API.Get_Configurable_Db(PART_NO),
              'CONFIGURED',
              'TRUE',
              'FALSE') configurable,
       decode(use_latest_val_str_rev_db, 'TRUE', 'TRUE', 'FALSE') use_latest_val_str_rev_db,
       decode(use_latest_valid_rout_rev_db, 'TRUE', 'TRUE', 'FALSE') use_latest_valid_rout_rev_db,
       cost_calculation_status_db cost_calculation_status_db,
       END_ITEM_DB end_item_db,
       Manuf_Structure_Head_API.Structure_Exist(CONTRACT, PART_NO) dfn_structure_exsist,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((SUNK_LEVEL_COST / TOTAL_LEVEL_COST), 2)) sunk_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((RELEVANT_LEVEL_COST / TOTAL_LEVEL_COST), 2)) relevant_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((INDIRECT_LEVEL_COST / TOTAL_LEVEL_COST), 2)) indirect_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((DIRECT_LEVEL_COST / TOTAL_LEVEL_COST), 2)) direct_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((FIXED_LEVEL_COST / TOTAL_LEVEL_COST), 2)) fixed_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((VARIABLE_LEVEL_COST / TOTAL_LEVEL_COST), 2)) variable_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((LEVEL_SCRAP_COST / TOTAL_LEVEL_COST), 2)) scrap_level_cost_fact,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((SUNK_ACCUM_COST / TOTAL_ACCUM_COST), 2)) sunk_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((RELEVANT_ACCUM_COST / TOTAL_ACCUM_COST), 2)) relevant_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((INDIRECT_ACCUM_COST / TOTAL_ACCUM_COST), 2)) indirect_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((DIRECT_ACCUM_COST / TOTAL_ACCUM_COST), 2)) direct_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((FIXED_ACCUM_COST / TOTAL_ACCUM_COST), 2)) fixed_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((VARIABLE_ACCUM_COST / TOTAL_ACCUM_COST), 2)) variable_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((ACCUM_SCRAP_COST / TOTAL_ACCUM_COST), 2)) scrap_accumulated_cost,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((UNIT_RELATED_LEVEL_COST / TOTAL_LEVEL_COST), 2)) unit_related_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((BATCH_RELATED_LEVEL_COST / TOTAL_LEVEL_COST), 2)) batch_related_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((PRODUCT_RELATED_LEVEL_COST / TOTAL_LEVEL_COST), 2)) product_related_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((FACILITY_SUST_LEVEL_COST / TOTAL_LEVEL_COST), 2)) facility_sustaining_level_cost_fact,
       UNIT_RELATED_LEVEL_COST + BATCH_RELATED_LEVEL_COST +
       PRODUCT_RELATED_LEVEL_COST + FACILITY_SUST_LEVEL_COST total_activity_level_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((UNIT_RELATED_ACCUM_COST / TOTAL_ACCUM_COST), 2)) unit_related_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((BATCH_RELATED_ACCUM_COST / TOTAL_ACCUM_COST), 2)) batch_related_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((PRODUCT_RELATED_ACCUM_COST / TOTAL_ACCUM_COST), 2)) product_related_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((FACILITY_SUST_ACCUM_COST / TOTAL_ACCUM_COST), 2)) facility_sustaining_accumulated_cost,
       UNIT_RELATED_ACCUM_COST + BATCH_RELATED_ACCUM_COST +
       PRODUCT_RELATED_ACCUM_COST + FACILITY_SUST_ACCUM_COST total_activity_accumulated_cost,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((VALUE_ADDED_LEVEL_COST / TOTAL_LEVEL_COST), 2)) value_added_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((SUPPORTIVE_ACT_LEVEL_COST / TOTAL_LEVEL_COST), 2)) supportive_act_level_cost_fact,
       decode(TOTAL_LEVEL_COST,
              0,
              0,
              ROUND((NON_VALUE_ADDED_LEVEL_COST / TOTAL_LEVEL_COST), 2)) non_value_added_level_cost_fact,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((VALUE_ADDED_ACCUM_COST / TOTAL_ACCUM_COST), 2)) value_added_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((SUPPORTIVE_ACT_ACCUM_COST / TOTAL_ACCUM_COST), 2)) supportive_activity_accumulated_cost,
       decode(TOTAL_ACCUM_COST,
              0,
              0,
              ROUND((NON_VALUE_ADDED_ACCUM_COST / TOTAL_ACCUM_COST), 2)) non_value_added_accumulated_cost,
       TOTAL_ACCUM_COST - KAIZEN_COST kaizen_cost_gap,
       Part_Kaizen_Cost_API.Get_Acc_Cost_Red(CONTRACT,
                                             PART_NO,
                                             COST_SET,
                                             ALTERNATIVE_NO,
                                             ROUTING_ALTERNATIVE_NO) potential_red,
       Part_Kaizen_Cost_API.Get_Acc_Verified_Red(CONTRACT,
                                                 PART_NO,
                                                 COST_SET,
                                                 ALTERNATIVE_NO,
                                                 ROUTING_ALTERNATIVE_NO) verified_red,
       Fnd_Session_Api.Get_Fnd_User fnd_user,
       SYSDATE current_date,
       Part_Cost_Bucket_API.Get_Max_Bucket_Seq(CONTRACT,
                                               part_no,
                                               cost_set,
                                               alternative_no,
                                               routing_alternative_no,
                                               alternative_no,
                                               routing_alternative_no,
                                               calculation_date) max_bucket_seq,
       Part_Cost_Bucket_API.Get_Top_Level_Part(contract,
                                               part_no,
                                               cost_set,
                                               alternative_no,
                                               routing_alternative_no,
                                               alternative_no,
                                               routing_alternative_no,
                                               calculation_date,
                                               Part_Cost_Bucket_API.Get_Max_Bucket_Seq(CONTRACT,
                                                                                       part_no,
                                                                                       cost_set,
                                                                                       alternative_no,
                                                                                       routing_alternative_no,
                                                                                       alternative_no,
                                                                                       routing_alternative_no,
                                                                                       calculation_date)) top_level_part_no,
       Part_Cost_Bucket_API.Get_Next_Bucket_Level(contract,
                                                  part_no,
                                                  cost_set,
                                                  alternative_no,
                                                  routing_alternative_no,
                                                  alternative_no,
                                                  routing_alternative_no,
                                                  calculation_date) next_bucket_level,
       Part_Cost_Bucket_API.Get_Bucket_Seq(contract,
                                           part_no,
                                           cost_set,
                                           alternative_no,
                                           routing_alternative_no,
                                           calculation_date) next_bucket_seq,
       Inventory_Part_API.Get_Type_Code(contract, part_no) type_code,
       Inventory_Part_API.Get_Description(contract, part_no) description                                                                                                                                                               
from PART_COST t
where to_date(substr(t.OBJVERSION, 0, 8), 'YYYYMMDD') between to_date('20181101', 'YYYYMMDD') AND  to_date('20240331', 'YYYYMMDD');
